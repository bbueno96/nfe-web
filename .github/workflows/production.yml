name: Production

on:
  push:
    tags:
      - '*'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2

      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run tests
        working-directory: packages/api
        run: yarn test:ci
        env:
          NODE_ENV: 'test'
          DATABASE_USER: 'postgres'
          DATABASE_PASS: 'postgres'
          DATABASE_HOST: 'localhost'
          DATABASE_PORT: '5432'
          DATABASE_NAME: 'postgres'
          APP_SECRET: 'testsecretexp'

      - name: Discord notification
        env:
          DISCORD_USERNAME: 'NFE Web'
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        if: failure()
        with:
          args: 'Os testes da API falharam.'

  deploy-api:
    runs-on: ubuntu-latest
    # needs: test

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2

      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run build
        working-directory: packages/api
        run: yarn run build

      - name: Deploy
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          ARGS: '-rltgoDzvO --delete'
          SOURCE: 'packages/api/'
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_API_USER }}
          REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
          TARGET: ${{ secrets.REMOTE_API_TARGET }}
          EXCLUDE: '/node_modules/'

      - name: Migrate database & restart
        uses: fifsky/ssh-action@master
        with:
          command: |
            cd ${{ secrets.REMOTE_API_TARGET }}
            yarn
            yarn prisma migrate deploy
            pm2 restart api
          host: ${{ secrets.REMOTE_HOST }}
          port: ${{ secrets.REMOTE_PORT }}
          user: ${{ secrets.REMOTE_API_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Discord notification
        env:
          DISCORD_USERNAME: 'NFE Web'
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        if: always()
        with:
          args: ${{ job.status == 'success' && 'A API foi publicada com sucesso.' || 'Erro ao publicar a API.' }}

  deploy-front:
    runs-on: ubuntu-latest
    # needs: test

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run build
        working-directory: packages/front
        run: yarn run build
        env:
          REACT_APP_API: 'https://nfe.sistemaexpert.com.br/api'
          REACT_APP_HOST_ENV: 'prod'

      - name: Deploy
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          ARGS: '-rltgoDzvO --delete'
          SOURCE: 'packages/front/build/'
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_FRONT_USER }}
          REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
          TARGET: ${{ secrets.REMOTE_FRONT_TARGET }}

      - name: Discord notification
        env:
          DISCORD_USERNAME: 'NFE Web'
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        if: always()
        with:
          args: ${{ job.status == 'success' && 'O Frontend foi publicado com sucesso.' || 'Erro ao publicar o frontend.' }}
